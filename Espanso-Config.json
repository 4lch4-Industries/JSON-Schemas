{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "JSON Schema for Espanso",
  "description": "A cross-platform Text Expander written in Rust",
  "type": "object",
  "additionalProperties": false,
  "definitions": {
    "match": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "trigger": {
          "type": "string",
          "description": "The text to type in order to trigger the replacement."
        },
        "replace": {
          "type": "string",
          "description": "The text to replace the trigger with."
        },
        "word": {
          "type": "boolean",
          "description": "Tells telling espanso to only trigger that match if surrounded by word separators ( such as spaces, commas and newlines).",
          "default": false
        },
        "propagate_case": {
          "type": "boolean",
          "default": false
        },
        "image_path": {
          "type": "string",
          "description": "The path to the image that will replace the trigger text."
        },
        "vars": {
          "type": "array",
          "description": "An array of variables to use within the replacement.",
          "items": {
            "type": "object",
            "description": "A variable to be used for dynamic matches.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the variable."
              },
              "type": {
                "type": "string",
                "description": "The data type of the variable.",
                "oneOf": [
                  {
                    "const": "date"
                  },
                  {
                    "const": "shell"
                  },
                  {
                    "const": "dummy"
                  }
                ]
              },
              "params": {
                "type": "object",
                "description": "The parameters to be used for generating the variable value.",
                "properties": {}
              }
            }
          }
        }
      }
    }
  },
  "properties": {
    "backend": {
      "type": "string",
      "oneOf": [
        {
          "const": "Clipboard",
          "description": "Simulate a copy/paste."
        },
        {
          "const": "Inject",
          "description": "Simulate keypresses."
        },
        {
          "const": "Auto",
          "description": "Only available for Linux and combines the other two options."
        }
      ]
    },
    "auto_restart": {
      "type": "boolean"
    },
    "backspace_limit": {
      "type": "integer",
      "description": "How many backspace espanso tracks to correct misspelled keywords."
    },
    "enable_active": {
      "type": "boolean",
      "description": "Disable the active mode for the current configuration."
    },
    "enable_passive": {
      "type": "boolean",
      "description": "Disable the passive mode for the current configuration."
    },
    "parent": {
      "type": "string",
      "description": "The target for the current configuration file, mainly used in packages."
    },
    "ipc_server_port": {
      "type": "integer",
      "description": "Set the daemon listening port (Windows Only)."
    },
    "exclude_default_entries": {
      "type": "boolean",
      "description": "Used in app-specific configs, avoid parent matches and global variables."
    },
    "toggle_key": {
      "type": "string",
      "description": "Change the key used to toggle espanso active mode.",
      "oneOf": [
        {
          "const": "CTRL"
        },
        {
          "const": "ALT"
        },
        {
          "const": "SHIFT"
        },
        {
          "const": "META"
        },
        {
          "const": "LEFT_CTRL"
        },
        {
          "const": "LEFT_ALT"
        },
        {
          "const": "LEFT_SHIFT"
        },
        {
          "const": "LEFT_META"
        },
        {
          "const": "RIGHT_CTRL"
        },
        {
          "const": "RIGHT_ALT"
        },
        {
          "const": "RIGHT_SHIFT"
        },
        {
          "const": "RIGHT_META"
        },
        {
          "const": "OFF"
        }
      ]
    },
    "passive_key": {
      "type": "string",
      "description": "Change the key used to trigger passive mode.",
      "oneOf": [
        {
          "const": "CTRL"
        },
        {
          "const": "ALT"
        },
        {
          "const": "SHIFT"
        },
        {
          "const": "META"
        },
        {
          "const": "LEFT_CTRL"
        },
        {
          "const": "LEFT_ALT"
        },
        {
          "const": "LEFT_SHIFT"
        },
        {
          "const": "LEFT_META"
        },
        {
          "const": "RIGHT_CTRL"
        },
        {
          "const": "RIGHT_ALT"
        },
        {
          "const": "RIGHT_SHIFT"
        },
        {
          "const": "RIGHT_META"
        },
        {
          "const": "OFF"
        }
      ]
    },
    "secure_input_notification": {
      "type": "boolean",
      "description": "Enable/Disable the Secure Input notification on macOS",
      "default": "true"
    },
    "show_icon": {
      "type": "boolean",
      "description": "Show/Hide the icon in the status bar on macOS and Windows."
    },
    "show_notifications": {
      "type": "boolean",
      "description": "Show/Hide the notifications."
    },
    "undo_backspace": {
      "type": "boolean",
      "description": "Enable/Disable the Backspace-To-Undo feature."
    },
    "fast_inject": {
      "type": "boolean",
      "description": "Use a faster injection mechanism (Linux only). It uses XSendEvent API rather than XTestFakeKeyEvent API, which is faster but incompatible with some applications."
    },
    "name": {
      "type": "string",
      "description": "The name of the current configuration."
    },
    "matches": {
      "type": "array",
      "description": "An array of match objects with a trigger/replacement value.",
      "items": {
        "$ref": "#/definitions/match"
      }
    },
    "version": {
      "type": "number",
      "description": "The version of the configuration."
    }
  }
}